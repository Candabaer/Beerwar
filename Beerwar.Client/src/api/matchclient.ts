//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return Success
     */
    create(): Promise<MatchData> {
        let url_ = this.baseUrl + "/api/Match/create";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<MatchData> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MatchData.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MatchData>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    finalize(body: MatchWinner | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Match/finalize";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFinalize(_response);
        });
    }

    protected processFinalize(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class MatchData implements IMatchData {
    beerOneId!: number;
    beerTwoId!: number;
    matchId!: string;
    imageUrlOne!: string;
    imageUrlTwo!: string;

    constructor(data?: IMatchData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beerOneId = _data["beerOneId"];
            this.beerTwoId = _data["beerTwoId"];
            this.matchId = _data["matchId"];
            this.imageUrlOne = _data["imageUrlOne"];
            this.imageUrlTwo = _data["imageUrlTwo"];
        }
    }

    static fromJS(data: any): MatchData {
        data = typeof data === 'object' ? data : {};
        let result = new MatchData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beerOneId"] = this.beerOneId;
        data["beerTwoId"] = this.beerTwoId;
        data["matchId"] = this.matchId;
        data["imageUrlOne"] = this.imageUrlOne;
        data["imageUrlTwo"] = this.imageUrlTwo;
        return data;
    }
}

export interface IMatchData {
    beerOneId: number;
    beerTwoId: number;
    matchId: string;
    imageUrlOne: string;
    imageUrlTwo: string;
}

export class MatchWinner implements IMatchWinner {
    matchId!: string;
    winnerId!: number;

    constructor(data?: IMatchWinner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.matchId = _data["matchId"];
            this.winnerId = _data["winnerId"];
        }
    }

    static fromJS(data: any): MatchWinner {
        data = typeof data === 'object' ? data : {};
        let result = new MatchWinner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["matchId"] = this.matchId;
        data["winnerId"] = this.winnerId;
        return data;
    }
}

export interface IMatchWinner {
    matchId: string;
    winnerId: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
