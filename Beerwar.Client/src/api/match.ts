//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return Success
     */
    create(): Promise<Match> {
        let url_ = this.baseUrl + "/api/Match/create";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<Match> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Match.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Match>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    finalize(body: MatchWinner | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Match/finalize";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFinalize(_response);
        });
    }

    protected processFinalize(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Beer implements IBeer {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    imageSource?: string | undefined;
    rating?: number;
    matchParticipation?: number;

    constructor(data?: IBeer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.imageSource = _data["imageSource"];
            this.rating = _data["rating"];
            this.matchParticipation = _data["matchParticipation"];
        }
    }

    static fromJS(data: any): Beer {
        data = typeof data === 'object' ? data : {};
        let result = new Beer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["imageSource"] = this.imageSource;
        data["rating"] = this.rating;
        data["matchParticipation"] = this.matchParticipation;
        return data;
    }
}

export interface IBeer {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    imageSource?: string | undefined;
    rating?: number;
    matchParticipation?: number;
}

export class Match implements IMatch {
    id?: number;
    date?: Date;
    winnerId?: number | undefined;
    ratingChange?: number | undefined;
    expectedWinProbability?: number;
    expectedLoseProbability?: number;
    duelantOneId?: number;
    beerOne?: Beer;
    duelantTwoId?: number;
    beerTwo?: Beer;

    constructor(data?: IMatch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : undefined as any;
            this.winnerId = _data["winnerId"];
            this.ratingChange = _data["ratingChange"];
            this.expectedWinProbability = _data["expectedWinProbability"];
            this.expectedLoseProbability = _data["expectedLoseProbability"];
            this.duelantOneId = _data["duelantOneId"];
            this.beerOne = _data["beerOne"] ? Beer.fromJS(_data["beerOne"]) : undefined as any;
            this.duelantTwoId = _data["duelantTwoId"];
            this.beerTwo = _data["beerTwo"] ? Beer.fromJS(_data["beerTwo"]) : undefined as any;
        }
    }

    static fromJS(data: any): Match {
        data = typeof data === 'object' ? data : {};
        let result = new Match();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : undefined as any;
        data["winnerId"] = this.winnerId;
        data["ratingChange"] = this.ratingChange;
        data["expectedWinProbability"] = this.expectedWinProbability;
        data["expectedLoseProbability"] = this.expectedLoseProbability;
        data["duelantOneId"] = this.duelantOneId;
        data["beerOne"] = this.beerOne ? this.beerOne.toJSON() : undefined as any;
        data["duelantTwoId"] = this.duelantTwoId;
        data["beerTwo"] = this.beerTwo ? this.beerTwo.toJSON() : undefined as any;
        return data;
    }
}

export interface IMatch {
    id?: number;
    date?: Date;
    winnerId?: number | undefined;
    ratingChange?: number | undefined;
    expectedWinProbability?: number;
    expectedLoseProbability?: number;
    duelantOneId?: number;
    beerOne?: Beer;
    duelantTwoId?: number;
    beerTwo?: Beer;
}

export class MatchWinner implements IMatchWinner {
    matchId?: number;
    winnerId?: number;

    constructor(data?: IMatchWinner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.matchId = _data["matchId"];
            this.winnerId = _data["winnerId"];
        }
    }

    static fromJS(data: any): MatchWinner {
        data = typeof data === 'object' ? data : {};
        let result = new MatchWinner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["matchId"] = this.matchId;
        data["winnerId"] = this.winnerId;
        return data;
    }
}

export interface IMatchWinner {
    matchId?: number;
    winnerId?: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}